/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface DeFiCrowdFundingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MINIMUM_INVESTMENT"
      | "checkUpkeep"
      | "endDate"
      | "invest"
      | "investments"
      | "investors"
      | "minimumReached"
      | "performUpkeep"
      | "refunds"
      | "startDate"
      | "totalInvestment"
      | "usdcToken"
      | "withdrawRefund"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "MINIMUM_INVESTMENT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkUpkeep",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "endDate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "invest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "investments",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "investors",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "minimumReached",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "performUpkeep",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "refunds",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "startDate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalInvestment",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "usdcToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawRefund",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "MINIMUM_INVESTMENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkUpkeep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endDate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "invest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "investments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "investors", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minimumReached",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "performUpkeep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "refunds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "startDate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalInvestment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdcToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawRefund",
    data: BytesLike
  ): Result;
}

export interface DeFiCrowdFunding extends BaseContract {
  connect(runner?: ContractRunner | null): DeFiCrowdFunding;
  waitForDeployment(): Promise<this>;

  interface: DeFiCrowdFundingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MINIMUM_INVESTMENT: TypedContractMethod<[], [bigint], "view">;

  checkUpkeep: TypedContractMethod<
    [arg0: BytesLike],
    [[boolean, string] & { upkeepNeeded: boolean; performData: string }],
    "view"
  >;

  endDate: TypedContractMethod<[], [bigint], "view">;

  invest: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  investments: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  investors: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  minimumReached: TypedContractMethod<[], [boolean], "view">;

  performUpkeep: TypedContractMethod<[arg0: BytesLike], [void], "nonpayable">;

  refunds: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  startDate: TypedContractMethod<[], [bigint], "view">;

  totalInvestment: TypedContractMethod<[], [bigint], "view">;

  usdcToken: TypedContractMethod<[], [string], "view">;

  withdrawRefund: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MINIMUM_INVESTMENT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "checkUpkeep"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [[boolean, string] & { upkeepNeeded: boolean; performData: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "endDate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "invest"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "investments"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "investors"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "minimumReached"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "performUpkeep"
  ): TypedContractMethod<[arg0: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "refunds"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "startDate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalInvestment"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "usdcToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdrawRefund"
  ): TypedContractMethod<[], [void], "nonpayable">;

  filters: {};
}
